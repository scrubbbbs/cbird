#!/bin/bash
#  Play two videos side-by-side using ffmpeg/ffprobe/ffplay
#  Copyright (C) 2023 scrubbbbs
#  Contact: screubbbebs@gemeaile.com =~ s/e//g
#  Project: https://github.com/scrubbbbs/cbird

#  This file is part of cbird.

#  cbird is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation; either
#  version 2 of the License, or (at your option) any later version.
#
#  cbird is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public
#  License along with cbird; if not, see
#  <https://www.gnu.org/licenses/>.
##
# ffplay-sbs
# args: file1,seek1,file2,seek2 or file1,file2
#
# Each video is seeked to a pipe, as is the audio.
# This works well but the downside is you cannot
# seek in the player.
#
# Both audio streams are present, press "a" to
# cycle audio track between left/right
#
prog=$0

if [ $# -lt 4 ]; then
  file1="$1"
  file2="$2"
  seek1=0
  seek2=0
else
  file1="$1"
  seek1="$2"
  file2="$3"
  seek2="$4"
fi

if [ -z $TMPDIR ]; then
  TMPDIR=/tmp
fi

echo $prog \"$file1\" $seek1 \"$file2\" $seek2

if [ ! -f "$file1" ];  then
  echo $prog "$file1" not accessible
  exit 1
fi

if [ ! -f "$file2" ]; then
  echo $prog "$file2" not accessible
  exit 2
fi

ffmpeg -filters 2>&1 | grep -q drawtext
if [ $? -eq 1 ]; then
  echo $prog ffmpeg filter \"drawtext\" is not available
  exit 3
fi

# drop chars that will be a problem for drawtext
name1=$(basename "$file1" | sed -re "s/[,=:'\"]+/_/g")
name2=$(basename "$file2" | sed -re  "s/[,=:'\"]+/_/g")

echo $prog n1: $name1
echo $prog n2: $name2

input1=$TMPDIR/sbsLeft.avi
input2=$TMPDIR/sbsRight.avi
rm -f $input1 $input2

#ln -sf "$file1" $input1 
#ln -sf "$file2" $input2

video1=$TMPDIR/sbsLeft.y4m
video2=$TMPDIR/sbsRight.y4m
audio1=$TMPDIR/sbsLeft.wav
audio2=$TMPDIR/sbsRight.wav
info1=$TMPDIR/sbsInfo1.txt
info2=$TMPDIR/sbsInfo2.txt

log=$TMPDIR/sbsLog

rm -f $video1 $video2 $audio1 $audio2 $log.*

parse() {
  local file="$1"
  local pattern="$2"
  echo $(cat $file | grep "$pattern" | head -n 1 | cut -d'=' -f2)
}

width_for_height() {
  local height="$1"
  local dar="$2"
  local fb_height="$3"
  local fb_width="$4"
  if [ "$dar" = "N/A" ]; then
    echo $(($ih * $fb_width / $fb_height))
  else
    local aspect_num=$(echo $dar | cut -d':' -f1)
    local aspect_den=$(echo $dar | cut -d':' -f2)
    echo $(($ih * $aspect_num / $aspect_den))
  fi
}

ffprobe -show_streams "$file1" 2>/dev/null > $info1
ffprobe -show_streams "$file2" 2>/dev/null > $info2

# yuv4mpegpipe doesn't handle all pixel formats 420p is very common
videoArgs="  -f yuv4mpegpipe -pix_fmt yuv420p -y"
audioArgs="  -f wav -y"

# FIXME: ffplay halts instead of looping; mpv does not
#loop="-stream_loop -1 -t 2"
loop=""

# use fifo to transcode both videos into raw yuv streams
# seems to overcome various codec issues
mkfifo $video1
FFREPORT="level=32:file=$log.1v.log" ffmpeg $loop -ss "$seek1" -i "$file1" \
    $videoArgs $video1 >/dev/null 2>&1 &

hasAudio=$(parse $info1 "^sample_rate")
if [ -z "$hasAudio" ]; then
  audio1Args="-f lavfi -i anullsrc=channel_layout=stereo:sample_rate=44100"
else
  mkfifo $audio1
  FFREPORT="level=32:file=$log.1a.log" ffmpeg $loop -ss "$seek1" -i "$file1" \
      $audioArgs $audio1 >/dev/null 2>&1 &
  audio1Args="-i $audio1"
fi

mkfifo $video2
FFREPORT="level=32:file=$log.2v.log" ffmpeg $loop -ss "$seek2" -i "$file2" \
    $videoArgs $video2 >/dev/null 2>&1 &

hasAudio=$(parse $info2 "^sample_rate")
if [ -z "$hasAudio" ]; then
  audio2Args="-f lavfi -i anullsrc=channel_layout=stereo:sample_rate=44100"
else
  mkfifo $audio2
  FFREPORT="level=32:file=$log.2a.log" ffmpeg $loop -ss "$seek2" -i "$file2" \
      $audioArgs $audio2 >/dev/null 2>&1 &
  audio2Args="-i $audio2"
fi


height1=$(parse $info1 "^height")
height2=$(parse $info2 "^height")

# correct aspect ratio for non-square pixels
dar1=$(parse $info1 "^display_aspect_ratio")
dar2=$(parse $info2 "^display_aspect_ratio")

# dar not always availble, use the width
width1=$(parse $info1 "^width")
width2=$(parse $info2 "^width")

# handle metadata rotation
# ffmpeg does the actual rotation automatically, we only need to swap width/height
rotation_swap() {
  local idx=$1
  eval "local num=\$rotation$idx"
  local abs=$(( num < 0 ? -num : num)) # absolute value
  if (( (abs/90) % 2 != 0 )); then # rotation is odd multiple of 90
    eval "local tmp=\$width$idx"  # swap width/height
    eval "width$idx=\$height$idx"
    eval "height$idx=\$tmp"
    eval "local aspect=\$dar$idx" # swap aspect ratio
    local aspect_num=$(echo $aspect | cut -d':' -f1)
    local aspect_den=$(echo $aspect | cut -d':' -f2)
    eval "dar$idx=\"$aspect_den:$aspect_num\""
  fi
}

rotation1=$(parse $info1 "^rotation")
rotation2=$(parse $info2 "^rotation")
[ -n "$rotation1" ] || rotation1=0;
[ -n "$rotation2" ] || rotation2=0;

if [ "$rotation1" -ne 0 ]; then
  rotation_swap 1
fi

if [ "$rotation2" -ne 0 ]; then
  rotation_swap 2
fi

name1="$name1 \[${height1}p\]"
name2="$name2 \[${height2}p\]"

# scale input to tallest video
if [ $height1 -gt $height2 ]; then
  ih=$height1
  iw=$(width_for_height $ih $dar1 $height1 $width1)
else
  ih=$height2
  iw=$(width_for_height $ih $dar2 $height2 $width2)
fi

width1=$(width_for_height $ih $dar1 $height1 $width1)
width2=$(width_for_height $ih $dar2 $height2 $width2)

echo $prog h1: $height1 w1: $width1 dar1: $dar1
echo $prog h2: $height2 w2: $width2 dar2: $dar2

scale1="scale=w=$width1:h=$ih"
scale2="scale=w=$width2:h=$ih"

# center-crop each side, sets the final output width
# make output 16:9 for wide videos, 1:1 for vertical videos
if [ $iw -gt $ih ]; then
  crop_w=$(($ih * 1777 / 1000 / 2))
else
  crop_w=$iw
fi
echo $prog crop_w: $crop_w

# kinda resolution-independant
fontsize=$(($ih / 48))
if [ $fontsize -lt 12 ]; then
  fontsize=12
fi
echo $prog fontsize: $fontsize

textfmt="box=1:boxcolor=black:boxborderw=5:fontsize=$fontsize:fontcolor=white:alpha=0.75"
toptext="x=w/2-text_w/2:y=10"
bottext="x=w/2-text_w/2:y=h-text_h-10"

helptext="[q]uit - [f]ullscreen - [a]udio"

crop=",crop=$crop_w:$ih"
#crop=

quiet="-v quiet"
#quiet=

# crop is optional, but won't fill screen
# setsar=1 since scale makes input 1:1
# -f matroska allows forward seek to somewhat work, to fast-forward anyways
FFREPORT="level=32:file=$log.ff.log" ffmpeg $audio1Args $audio2Args -f lavfi -i "\
  movie=$video1 [left]; \
  movie=$video2 [right]; \
[right]$scale2,setsar=1$crop,drawtext=text=$name2:$toptext:$textfmt [rs];\
 [left]$scale1,setsar=1$crop,drawtext=text=$name1:$toptext:$textfmt [ls];\
[ls][rs]hstack,drawtext=text='$helptext':$bottext:$textfmt [out0]" \
-map 2:v -c:v rawvideo -map 0:a:0 -map 1:a:0 -c:a pcm_s16le -f matroska - 2>/dev/null | \
ffplay -fs -autoexit $quiet -window_title "$prog" -

# in case process crashes cleanup ffmpeg jobs
echo $prog cleaning up...
for p in $(jobs -pr); do
  kill  $p
done

#less $log.*

rm -f $video1 $video2 $audio1 $audio2 $info1 $info2 $log.*
echo $prog done
exit
